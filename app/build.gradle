apply plugin: 'com.android.application'
apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.5"
}
android {
    compileSdkVersion configCompileSdkVersion
    buildToolsVersion configBuildToolsVersion

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion configTargetSdkVersion
        versionCode 1
        versionName project.version
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            testCoverageEnabled true
        }
    }
    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation "com.android.support:support-annotations:$supportVersion"
    implementation "com.android.support:appcompat-v7:$supportVersion"

    testImplementation 'org.assertj:assertj-core:1.7.1'
    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestImplementation 'com.android.support.test:rules:0.5'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: 'jacoco/testDebugUnitTest.exec'))
}